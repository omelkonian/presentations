\section{BitML}

\subsection{Contracts}

\begin{frame}{Basic Types}
\begin{agda}\begin{code}
module BitML  (Participant : Set) (_ ≟ SUBP _ : Decidable {A = Participant} _ ≡ _)
              (Honest : List SPLUS Participant) where
Time     = ℕ
Value    = ℕ
Secret   = String
Deposit  = Participant × Value

data Arith : List Secret → Set where DOTS
NN _ ⟧ : Arith s → ℕ

data Predicate : List Secret → Set where DOTS
BB _ ⟧ : Predicate s → Bool
\end{code}\end{agda}
\end{frame}

\begin{frame}{Contract Preconditions}
\begin{agda}\begin{code}
data Precondition  :  List Value -- volatile deposits
                   →  List Value -- persistent deposits
                   →  Set where
  -- volatile deposit
  _ ? _ : Participant → (v : Value) → Precondition [ v ] []
  -- persistent deposit
  _ ! _ : Participant → (v : Value) → Precondition [] [ v ]
  -- committed secret
  _ ♯ _ : Participant → Secret → Precondition [] []
  -- conjunction
  _ ∧ _  :  Precondition vs SUBV vs SUBP → Precondition vs SUBV PRIME vs SUBP PRIME
         →  Precondition (vs SUBV ++ vs SUBV PRIME) (vs SUBP ++ vs SUBP PRIME)
\end{code}\end{agda}
\end{frame}

\begin{frame}{Contracts I}
\savecolumns
\begin{agda}\begin{code}
data Contract  :  Value   -- the monetary value it carries
               →  Values  -- the volatile deposits it presumes
               →  Set where
##
  -- collect deposits and secrets
  put _ reveal _ if _ ⇒ _ ∶- _ :
    (vs : List Value) → (s : Secrets) → Predicate s PRIME
    → Contract (v + sum vs) vs PRIME → s PRIME ⊆ s
    → Contract v (vs PRIME ++ vs)
##
  -- transfer the remaining balance to a participant
  withdraw : ∀ {v vs} → Participant → Contract v vs
\end{code}\end{agda}
\end{frame}

\begin{frame}{Contracts II}
\restorecolumns
\begin{agda}\begin{code}
  -- split the balance across different branches
  split :  ∀ {vs} → (cs : List (exists v RP ^^ Contract v vs))
        →  Contract (sum (proj₁ ⟨$⟩ cs)) vs
##
  -- wait for participant's authorization
  _ : _ : Participant → Contract v vs → Contract v vs
##
  -- wait until some time passes
  after _ : _ : Time → Contract v vs → Contract v vs
\end{code}\end{agda}
\end{frame}

\begin{frame}{Advertisements}
\begin{agda}\begin{code}
record Advertisement (v : Value) (vs SC vs SV vs SP : List Value) : Set where
  constructor _ ⟨ _ ⟩∶- _
  field  G      :  Precondition vs SV vs SP
         C      :  Contracts v vs SC
         valid  :  length vs SC ≤ length vs SV
                ×  participants SG G ++ participants SC C
                     ⊆
                   (participant ⟨$⟩ persistentDeposits G)
                ×  v ≡ sum vs SP
\end{code}\end{agda}
\end{frame}

\begin{frame}{Example Advertisement}
\begin{agda}\begin{code}
open BitML (A | B) DOTS [ A ] SPLUS

ex-ad : Advertisement 5 [ 200 ] [ 200 ] (3 ∷ 2 ∷ [])
ex-ad =  ⟨  B ! 3 ∧ A ! 2 ∧ A ? 200 ⟩
          split  (  2 ⊸ withdraw B
                 ⊕  2 ⊸ after 42 ∶ withdraw A
                 ⊕  1 ⊸ put [ 200 ] ⇒ B ∶ withdraw {201} A
                 )
          ∶- DOTS
\end{code}\end{agda}
\end{frame}

\subsection{Small-step Semantics}

\begin{frame}{Small-step Semantics: Actions I}
\savecolumns
\begin{agda}\begin{code}
AdvertisedContracts = List (exists v , DOTS , vs SP RP ^^ Advertisement v DOTS vs SP)
ActiveContracts = List (exists v , vs RP ^^ Contracts v vs)
##
data Action (p : Participant)  -- the participant that authorizes this action
  :  AdvertisedContracts       -- the contract advertisements it requires
  →  ActiveContracts           -- the active contracts it requires
  →  Values                    -- the deposits it requires from this participant
  →  Deposits                  -- the deposits it produces
  →  Set where
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Actions II}
\restorecolumns
\begin{agda}\begin{code}
  -- join two deposits deposits
  _ ↔ _  :  ∀ {vs} →  (i : Index vs) →  (j : Index vs)
         →  Action p [] [] vs ((p has UR) ⟨$⟩ updateAt ((i , vs ‼ i + vs ‼ j) ∷ (j , 0) ∷ []) vs)
  -- commit secrets to stipulate an advertisement
  HTRI _  :  (ad : Advertisement v vs SC vs SV vs SP)
          →  Action p [ v , vs SC , vs SV , vs SP , ad ] [] [] []
  -- spend x to stipulate an advertisement
  _ STRI _  :  (ad : Advertisement v vs SC vs SV vs SP) →  (i : Index vs SP)
            →  Action p [ v , vs SC , vs SV , vs SP , ad ] [] [ vs SP ‼ i ] []
  -- pick a branch
  _ BTRI _  :  (c : Contracts v vs) →  (i : Index c)
            →  Action p [] [ v , vs , c ] [] []
  VDOTS
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Actions Example}
\begin{agda}\begin{code}
ex-spend : Action A [ 5 , [ 200 ] , [ 200 ] , 3 ∷ 2 ∷ [] , ex-ad ] [] [ 2 ] []
ex-spend = ex-ad STRI 1
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Configurations I}
\savecolumns
\begin{agda}\begin{code}
data Configuration PRIME  :  -- $\hspace{22pt}$ current $\hspace{23pt}$ $\times$ $\hspace{15pt}$ required
                             AdvertisedContracts  × AdvertisedContracts
                          →  ActiveContracts      × ActiveContracts
                          →  Deposits             × Deposits
                          →  Set where

  -- empty
  ∅ : Configuration PRIME ([] , []) ([] , []) ([] , [])

  -- contract advertisement
  ` _  :  (ad : Advertisement v vs SC vs SV vs SP)
       →  Configuration PRIME ([ v , vs SC , vs SV , vs SP , ad ] , []) ([] , []) ([] , [])

  -- active contract
  ⟨ _ , _ ⟩ SCC  :  (c : Contracts v vs) → Value
                 →  Configuration PRIME ([] , []) ([ v , vs , c ] , []) ([] , [])
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Configurations II}
\restorecolumns
\begin{agda}\begin{code}
  -- deposit redeemable by a participant
  ⟨ _ , _ ⟩ SDD  :  (p : Participant) → (v : Value)
                 →  Configuration PRIME ([] , []) ([] , []) ([ p has v ] , [])

  -- authorization to perform an action
  _ [ _ ]  :  (p : Participant) → Action p ads cs vs ds
           →  Configuration PRIME ([] , ads) ([] , cs) (ds , ((p has _) ⟨$⟩ vs))

  -- committed secret
  ⟨ _ ∶ _ ♯ _ ⟩  :  Participant → Secret →  ℕ ⊎ ⊥
                 →  Configuration PRIME ([] , []) ([] , []) ([] , [])
  -- revealed secret
  _ ∶ _ ♯ _  :  Participant → Secret → ℕ
             →  Configuration PRIME ([] , []) ([] , []) ([] , [])
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Configurations III}
\restorecolumns
\begin{agda}\begin{code}
  -- parallel composition
  _ | _  :  Configuration PRIME  (ads SL , rads SL) (cs SL , rcs SL) (ds SL , rds SL)
         →  Configuration PRIME  (ads SR , rads SR) (cs SR , rcs SR) (ds SR , rds SR)
         →  Configuration PRIME  (ads SL ++ ads SR           , rads SL  ++ (rads SR ∖ ads SL))
                                 (cs SL ++ cs SR             , rcs SL ++ (rcs SR ∖ cs SL))
                                 ((ds SL ∖ rds SR) ++ ds SR  , rds SL ++ (rds SR ∖ ds SL))
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Closed Configurations}
\begin{agda}\begin{code}
Configuration ads cs ds = Configuration PRIME (ads , []) (cs , []) (ds , [])
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Inference Rules I}
\savecolumns
\begin{agda}\begin{code}
data _ —→ _  :  Configuration ads cs ds → Configuration ads PRIME cs PRIME ds PRIME
                     →  Set where
  DEP-AuthJoin :
    ⟨ A , v ⟩ SDD | ⟨ A , v PRIME ⟩ SDD | Γ —→ ⟨ A , v ⟩ SDD | ⟨ A , v PRIME ⟩ SDD | A [ 0 ↔ 1 ] | Γ
##
  DEP-Join :
    ⟨ A , v ⟩ SDD | ⟨ A , v PRIME ⟩ SDD | A [ 0 ↔ 1 ] | Γ —→ ⟨ A , v + v PRIME ⟩ SDD | Γ
##
  C-Advertise : ∀ {Γ ad}
    →  exists p ∈ participants SG (G ad) RP p ∈ Hon
       {-\inferLine{6cm}-}
    →  Γ —→ ` ad | Γ
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Inference Rules II}
\restorecolumns
\begin{agda}\begin{code}
  C-AuthCommit : ∀ {A ad Γ}
    →  secrets (G ad) ≡ a₁ DOTS aₙ
    →  (A ∈ Hon → ∀[ i ∈ 1 DOTS n ] a SUBI ≢ ⊥)
       {-\inferLine{8cm}-}
    →  ` ad | Γ —→ ` ad | Γ | DOTS ⟨ A : a SUBI ♯ N SUBI ⟩ DOTS ^^ BAR ^^ A [ ♯ ▷ ^^ ad ]
##
  C-Control : ∀ {Γ C i D}
    →  C ‼ i ≡ A₁ : DOTS : Aₙ : D
       {-\inferLine{8cm}-}
    →  ⟨ C , v ⟩ SCC | DOTS A SUBI [ C BTRI i ] DOTS | Γ —→ ⟨ D , v ⟩ SCC | Γ
  VDOTS
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Timed Inference Rules I}
\savecolumns
\begin{agda}\begin{code}
record Configuration ST ads cs ds : Set where
  constructor _ at _
  field  cfg   : Configuration ads cs ds
         time  : Time

data _ —→ SUBT _  :  Configuration ST ads cs ds → Configuration ST ads PRIME cs PRIME ds PRIME
                  →  Set where
  Action : ∀ {Γ Γ PRIME t}
    →  Γ —→ Γ PRIME
       {-\inferLine{3cm}-}
    →  Γ at t —→ SUBT Γ PRIME at t
##
  Delay : ∀ {Γ t δ}
       {-\inferLine{4cm}-}
    →  Γ at t —→ SUBT Γ at (t + δ)
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Timed Inference Rules II}
\restorecolumns
\begin{agda}\begin{code}
  Timeout : ∀ {Γ Γ PRIME t i contract}
       -- all time constraints are satisfied
    →  All (_ ≤ t) (timeDecorations (contract ‼ i))
       -- resulting state if we pick this branch
    →  ⟨ [ contract ‼ i ] , v ⟩ SCC | Γ —→ Γ PRIME
       {-\inferLine{6cm}-}
    →  (⟨ contract , v ⟩ SCC | Γ) at t —→ SUBT Γ PRIME at t
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Reordering I}
\begin{agda}\begin{code}
_ ≈ _ : Configuration ads cs ds → Configuration ads cs ds → Set
c ≈ c PRIME = cfgToList c ↭ cfgToList c PRIME
  where
    open import Data.List.Permutation using (_ ↭ _)
    cfgToList  ∅                 = []
    cfgToList  (l | r)           = cfgToList l ++ cfgToList r
    cfgToList  {p₁} {p₂} {p₃} c  = [ p₁ , p₂ , p₃ , c ]
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Reordering II}
\begin{agda}\begin{code}
  DEP-AuthJoin :
       Configuration ads cs (A has v ∷ A has v PRIME ∷ ds) ∋
         Γ PRIME ≈ ⟨ A , v ⟩ SDD | ⟨ A , v PRIME ⟩ SDD | Γ
    →  Configuration ads cs (A has (v + v PRIME) ∷ ds) ∋
         Γ DPRIME ≈ ⟨ A , v ⟩ SDD | ⟨ A , v PRIME ⟩ SDD | A [ 0 ↔ 1 ] | Γ
       {-\inferLine{8cm}-}
    →  Γ PRIME —→ Γ DPRIME
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Equational Reasoning}
\begin{agda}\begin{code}
data _ —↠ _ : Configuration ads cs ds → Configuration ads PRIME cs PRIME ds PRIME → Set where

  _ ∎ : (M : Configuration ads cs ds) → M —↠ M

  _ —→⟨ _ ⟩ _ : ∀ {L PRIME M M PRIME N} (L : Configuration ads cs ds)
    →  {L ≈ L PRIME × M ≈ M PRIME}
    →  L PRIME —→ M PRIME
    →  M —↠ N
       {-\inferLine{4cm}-}
    →  L —↠ N

begin _ : ∀ {M N} → M —↠ N → M —↠ N
\end{code}\end{agda}
\end{frame}

\subsection{Example}
\begin{frame}{Small-step Semantics: Example I}
\begin{agda}\begin{code}
tc : Advertisement 1 [] [] (1 ∷ 0 ∷ [])
tc =  ⟨ A ! 1 ∧ A ♯ a ∧ B ! 0 ⟩
         reveal [ a ] ⇒ withdraw A ∶- DOTS
      ⊕  after t ∶ withdraw B
\end{code}\end{agda}
\end{frame}

\begin{frame}{Small-step Semantics: Example II}
\begin{agda}\begin{code}
tc-semantics : ⟨ A , 1 ⟩ SDD —↠ ⟨ A , 1 ⟩ SDD | A ∶ a ♯ 6
tc-semantics =      ⟨ A , 1 ⟩ SDD
—→⟨ C-Advertise ⟩   ` tc | ⟨ A , 1 ⟩ SDD
—→⟨ C-AuthCommit ⟩  ` tc | ⟨ A , 1 ⟩ SDD | ⟨A ∶ a ♯♯ 6⟩ | A [ HTRI tc ]
—→⟨ C-AuthInit ⟩    ` tc | ⟨ A , 1 ⟩ SDD | ⟨A ∶ a ♯♯ 6⟩ | A [ HTRI tc ] | A [ tc STRI 0 ]
—→⟨ C-Init ⟩        ⟨ tc , 1 ⟩ SCC | ⟨ A ∶ a ♯♯ inj₁ 6 ⟩
—→⟨ C-AuthRev ⟩     ⟨ tc , 1 ⟩ SCC | A ∶ a ♯♯ 6
—→⟨ C-Control ⟩     ⟨ [ reveal DOTS ] , 1 ⟩ SCC | A ∶ a ♯♯ 6
—→⟨ C-PutRev ⟩      ⟨ [ withdraw A ] , 1 ⟩ SCC | A ∶ a ♯♯ 6
—→⟨ C-Withdraw ⟩    ⟨ A , 1 ⟩ SDD | A ∶ a ♯♯ 6
∎
\end{code}\end{agda}
\end{frame}

\subsection{Symbolic Model}
\begin{frame}{Symbolic Model: Labelled step relation}
\begin{agda}\begin{code}
data _ —→⟦ _ ⟧ _  :  Configuration ads cs ds
                  →  Label
                  →  Configuration ads′ cs′ ds′
                  →  Set where
  VDOTS
  DEP-AuthJoin :
    ⟨ A , v ⟩ SDD | ⟨ A , v′ ⟩ SDD | Γ
  —→⟦ auth-join[ A , 0 ↔ 1 ] ⟧
    ⟨ A , v ⟩ SDD | ⟨ A , v′ ⟩ SDD | A [ 0 ↔ 1 ] | Γ
  VDOTS
\end{code}\end{agda}
\end{frame}

\begin{frame}{Symbolic Model: Traces}
\begin{agda}\begin{code}
data Trace : Set where
  _ ∙         :  ∃TimedConfiguration → Trace

  _ ∷⟦ _ ⟧ _  :  ∃TimedConfiguration → Label → Trace → Trace
##
_ ——→⟦ _ ⟧ _ : Trace → Label → ∃TimedConfiguration → Set
R ——→⟦ α ⟧ (_ , _ , _ , tc′)
  = proj₂ (proj₂ (proj₂ (lastCfg R))) —→⟦ α ⟧ tc′
\end{code}\end{agda}
\end{frame}

\begin{frame}{Symbolic Model: Strategies (honest participant)}
\begin{agda}\begin{code}
record HonestStrategy (A : Participant) : Set where
  field
    strategy  :  Trace → List Label

    valid     :  A ∈ Hon                         {-\hspace{7cm}-}  {-(1)-}
              ×  (∀ R α → α ∈ strategy (R ∗) →                     {-(2)-}
                   ∃[ R′ ] (R ——→⟦ α ⟧ R′))
              ×  (∀ R α → α ∈ strategy (R ∗) →                     {-(3)-}
                   Allₘ (_≡ A) (authDecoration α))
              ×  (∀ R Δ Δ′ ad →                                    {-(4)-}
                   auth-commit[ A , ad , Δ  ] ∈ strategy (R ∗) →
                   auth-commit[ A , ad , Δ′ ] ∈ strategy (R ∗) →
                     Δ ≡ Δ′)
              ×  (∀ R T′ α → α ∈ strategy (R ∗) →                  {-(5)-}
                   ∃[ α′ ] (R ——→⟦ α′ ⟧ T′) →
                   ∃[ R″ ] (T′ ∷⟦ α ⟧ R ——→⟦ α ⟧ R″) →
                     α ∈ strategy ((T′ ∷⟦ α ⟧ R) ∗))
\end{code}\end{agda}
\end{frame}

\begin{frame}{Symbolic Model: Strategies (adversary)}
\begin{agda}\begin{code}
record AdversarialStrategy (Adv : Participant) : Set where
  field
    strategy  :  Trace → List (Participant × List Label) → Label

    valid     :  Adv ∉ Hon                                                                    {-(1)-}
              ×  (∀ {B ad Δ} → B ∉ Hon → α ≡ auth-commit[ B , ad , Δ ] →  {-\hspace{1.5cm}-}  {-(2)-}
                   α ≡ strategy (R ∗) [])
              ×  ∀ {R : Trace} {moves : List (Participant × List Label)} →                    {-(3)-}
                  let α = strategy (R ∗) moves in
                  (  ∃[ A ]
                       (  A ∈ Hon
                       ×  authDecoration α ≡ just A
                       ×  α ∈ concatMap proj₂ moves )
                  ⊎  (  authDecoration α ≡ nothing
                     ×  (∀ δ → α ≢ delay[ δ ])
                     ×  ∃[ R′ ] (R ——→⟦ α ⟧ R′) )
                  ⊎  (∃[ B ]
                        (  (authDecoration α ≡ just B)
                        ×  (B ∉ Hon)
                        ×  (∀ s → α ≢ auth-rev[ B , s ])
                        ×  ∃[ R′ ] (R ——→⟦ α ⟧ R′) ))
                  ⊎  ∃[ δ ]
                       (  (α ≡ delay[ δ ])
                       ×  All (λ{ (_ , Λ)  →  (Λ ≡ [])
                                           ⊎  Any (λ{ delay[ δ′ ] → δ′ ≥ δ ; _ → ⊥ }) Λ}) moves )
                  ⊎  ∃[ B ] ∃[ s ]
                       (  α ≡ auth-rev[ B , s ]
                       ×  B ∉ Hon
                       ×  ⟨ B ∶ s ♯ nothing ⟩ ∈ (R ∗)
                       ×  ∃[ R∗′ ] ∃[ Δ ] ∃[ ad ]
                            (  R∗′ ∈ prefixTraces (R ∗)
                            ×  strategy R∗′ [] ≡ auth-commit[ B , ad , Δ ]
                            ×  (s , nothing) ∈ Δ )))
\end{code}\end{agda}
\end{frame}

\begin{frame}{Symbolic Model: Conformance}
\begin{agda}\begin{code}
data _ -conforms-to- _ : Trace → Strategies → Set where
##
    base : ∀ {Γ : Configuration ads cs ds} {SS : Strategies}

      →  Initial Γ
         {-\inferLine{6cm}-}
      →  (ads , cs , ds , Γ at 0) ∙ ^^ ^^ -conforms-to- ^^ ^^ SS
##
    step : ∀ {R : Trace} {T′ : ∃TimedConfiguration} {SS : Strategies}
      →  R -conforms-to- SS
      →  R ——→⟦ runAdversary SS R ⟧ T′
         {-\inferLine{7cm}-}
      →  (T′ ∷⟦ runAdversary SS R ⟧ R) ^^ ^^ -conforms-to- ^^ ^^ SS
\end{code}\end{agda}
\end{frame}

\begin{frame}{Symbolic Model: Meta-theory}
\begin{itemize}
\item \begin{agda}\begin{code}
∗-preserves-semantics :
  (∀ A s     → α ≢ auth-rev[ A , s ]) →
  (∀ A ad Δ  → α ≢ auth-commit[ A , ad , Δ ])
  →  ( ∀ T′  →  R   ——→⟦ α ⟧ T′
                {-\inferLine{2.5cm}-}
             →  R ∗ ——→⟦ α ⟧ T′ ∗ )

  ×  ( ∀ T′  →  R ∗ ——→⟦ α ⟧ T′
                {-\inferLine{5cm}-}
             →  ∃[ T″ ] (R ——→⟦ α ⟧ T″) × (T′ ∗ ≡ T″ ∗ )
\end{code}\end{agda}
\item \begin{agda}\begin{code}
adversarial-move-is-semantic :
  ∃[ T′ ] ( R ——→⟦ runAdversary (S† , S) R ⟧ T′)
\end{code}\end{agda}
\end{itemize}
\end{frame}

\subsection{BitML Paper Fixes}
\begin{frame}{Fix I: Inference rules}
\begin{agda}\begin{code}
DOTS
\end{code}\end{agda}
\end{frame}

\begin{frame}{Fix II: Non-branching derivations}
\begin{agda}\begin{code}
DOTS
\end{code}\end{agda}
\end{frame}

\begin{frame}{Fix III: Conditions for adversarial strategies}
\begin{agda}\begin{code}
DOTS
\end{code}\end{agda}
\end{frame}

\begin{frame}{Fix IV: Semantics-preserving stripping}
\begin{agda}\begin{code}
DOTS
\end{code}\end{agda}
\end{frame}
